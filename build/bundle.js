(()=>{"use strict";var t={188:(t,e,n)=>{n.r(e)},540:(t,e,n)=>{n.r(e)},406:(t,e,n)=>{n.r(e)},121:(t,e,n)=>{n.r(e)},502:(t,e,n)=>{n.r(e)},948:(t,e,n)=>{n.r(e)},387:(t,e,n)=>{n.r(e)},752:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.App=void 0,n(387);const s=n(926),o=n(402),i=n(223),a=n(112),r=n(570);e.App=class{constructor(){this.appRoot=document.createElement("div"),this.appRoot.classList.add("app");const t=document.createElement("h1");t.classList.add("app__title");const e=document.createElement("div");e.classList.add("app__container"),this.appRoot.append(t,e),t.textContent="To-do List";const n=(0,r.getDefaultArray)();if(null==localStorage.getItem("notes")){const t=JSON.stringify(n);localStorage.setItem("notes",t)}const o=new s.Nav;this.list=new a.List;const d=new i.Form,c=this.handleNoteSubmit.bind(this);d.onFormSubmit(c),o.onFilterChange(this.handleFilterChange.bind(this)),e.append(o.container,this.list.container,d.container)}handleNoteSubmit(t){const e=new o.Note(t.note,t.date,t.status,t.id);this.list.addNote(e)}handleFilterChange(t,e){this.list.renderNotes(t,e),this.list.isReversed=e}}},570:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getDefaultArray=void 0,e.getDefaultArray=function(){const t=new Date;t.setMonth(0,1),t.setHours(11,20);const e=new Date;return e.setMonth(0,10),e.setHours(15,5),[{id:1,note:"Create new tasks",status:"Active",date:e},{id:2,note:"Create to-do list app",status:"Done",date:t}]}},223:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Form=void 0,n(188);const s=n(62);e.Form=class{constructor(){this.handler=null,this.container=document.createElement("div"),this.container.classList.add("board");const t=document.createElement("input");t.setAttribute("type","textarea"),t.setAttribute("required","true"),t.classList.add("board__input"),this.buttonAdd=document.createElement("button"),this.buttonAdd.classList.add("board__button"),this.buttonAdd.setAttribute("type","submit"),this.buttonAdd.textContent="Add",this.buttonAdd.setAttribute("disabled","true");const e=document.createElement("p");e.classList.add("board__counter"),this.counterValue=0,e.textContent=`${this.counterValue}/55`;const n=document.createElement("p");n.classList.add("board__counter_error","board__warning"),n.textContent="Note should contain from 5 to 55 symbols";const o=new s.Warning(this.buttonAdd);this.container.append(t,e,n,this.buttonAdd,o.container),t.addEventListener("input",(()=>this.countAndUpgradeInput(t,e,n))),this.buttonAdd.addEventListener("click",(e=>{e.preventDefault();const n=JSON.parse(localStorage.getItem("notes"));if(!1===this.checkNoteDuples(n,o.container)){const e=this.createAndSaveNewNote(n);this.handler&&this.handler(e),t.value="",this.counterValue=0,this.noteText=""}}))}countAndUpgradeInput(t,e,n){""===t.value?(this.counterValue=0,this.noteText=""):(this.counterValue=t.value.length,this.counterValue>=55&&(t.value=this.noteText),this.noteText=t.value[0].toUpperCase()+t.value.slice(1),t.value=this.noteText,this.counterValue<5?(e.classList.add("board__counter_error"),n.classList.add("board__warning_visible"),this.buttonAdd.setAttribute("disabled","true")):(e.classList.remove("board__counter_error"),n.classList.remove("board__warning_visible"),this.buttonAdd.removeAttribute("disabled"))),e.textContent=`${this.counterValue}/55`}checkNoteDuples(t,e){let n=t.find((t=>t.note===this.noteText));return void 0!==n&&"Active"===n.status&&(e.classList.add("warning_visible"),this.buttonAdd.setAttribute("disabled","true"),!0)}createAndSaveNewNote(t){const e={id:t[t.length-1].id+1,note:this.noteText,status:"Active",date:new Date};return t.push(e),localStorage.setItem("notes",JSON.stringify(t)),e}onFormSubmit(t){this.handler=t}}},112:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.List=void 0,n(540);const s=n(402);e.List=class{constructor(){this.isReversed=!1,this.container=document.createElement("div"),this.container.classList.add("list"),this.renderNotes("All",!1)}getFromLocalStorage(){this.notesArr=JSON.parse(localStorage.getItem("notes")).map((t=>Object.assign(Object.assign({},t),{date:new Date(t.date)})))}renderNotes(t,e){for(;this.container.firstChild;)this.container.removeChild(this.container.firstChild);this.getFromLocalStorage(),"Active"===t?this.notesArr=this.notesArr.filter((t=>"Active"===t.status)):"Done"===t&&(this.notesArr=this.notesArr.filter((t=>"Done"===t.status))),e?this.notesArr.sort(((t,e)=>t.date>e.date?1:-1)):this.notesArr.sort(((t,e)=>t.date<e.date?1:-1)),this.notesArr.forEach((t=>{const e=new s.Note(t.note,t.date,t.status,t.id);this.container.appendChild(e.container)}))}addNote(t){!0===this.isReversed?this.container.appendChild(t.container):this.container.prepend(t.container)}}},926:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Nav=void 0,n(406),e.Nav=class{constructor(){this.filter="All",this.isReversed=!1,this.handler=null,this.container=document.createElement("div"),this.container.classList.add("nav"),this.buttonsContainer=document.createElement("div"),this.buttonsContainer.classList.add("nav__container"),this.buttonReverse=document.createElement("button"),this.buttonReverse.classList.add("nav__button"),this.container.append(this.buttonsContainer,this.buttonReverse);const t=document.createElement("div");t.classList.add("nav__reverse"),this.buttonReverse.appendChild(t),this.buttonReverse.addEventListener("click",(()=>{!1===this.isReversed?this.isReversed=!0:this.isReversed=!1,this.handler(this.filter,this.isReversed)})),this.buttonAll=document.createElement("button"),this.buttonAll.classList.add("nav__button","nav__button_selected"),this.selectedButton=this.buttonAll,this.buttonAll.textContent="All",this.setFilterOnClick(this.buttonAll,"All"),this.buttonToDo=document.createElement("button"),this.buttonToDo.classList.add("nav__button"),this.buttonToDo.textContent="Active",this.setFilterOnClick(this.buttonToDo,"Active"),this.buttonDone=document.createElement("button"),this.buttonDone.classList.add("nav__button"),this.buttonDone.textContent="Done",this.setFilterOnClick(this.buttonDone,"Done"),this.buttonsContainer.append(this.buttonAll,this.buttonToDo,this.buttonDone)}onFilterChange(t){this.handler=t}setFilterOnClick(t,e){t.addEventListener("click",(()=>{this.selectedButton.classList.remove("nav__button_selected"),this.filter=e,this.selectedButton=t,t.classList.add("nav__button_selected"),this.handler(this.filter,this.isReversed)}))}}},402:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Note=void 0,n(121),e.Note=class{constructor(t,e,n,s){this.filter="All",this.id=s,this.container=document.createElement("div"),this.container.classList.add("note");const o=document.createElement("div");o.classList.add("note__container_inner");const i=document.createElement("div");i.classList.add("note__container_inner"),this.container.append(o,i);const a=document.createElement("h2");a.classList.add("note__text"),a.textContent=t,this.noteText=t;const r=document.createElement("div");r.classList.add("note__container_buttons"),o.append(a,r),this.buttonDelete=document.createElement("button"),this.buttonDelete.classList.add("note__button"),this.buttonDelete.textContent="Delete",this.buttonDelete.addEventListener("click",(()=>this.deleteNote())),this.buttonDone=document.createElement("button"),this.buttonDone.classList.add("note__button"),this.buttonDone.textContent="Done",this.buttonDone.addEventListener("click",(()=>this.markNoteAsDone())),r.append(this.buttonDone,this.buttonDelete),this.statusElem=document.createElement("p"),this.statusElem.classList.add("note__status"),this.statusElem.textContent=n,"Active"===n?this.statusElem.classList.add("note__status_active"):(this.statusElem.classList.add("note__status_done"),this.buttonDone.setAttribute("disabled","true"),this.buttonDelete.setAttribute("disabled","true"));const d=document.createElement("p");d.classList.add("note__date"),d.textContent=function(t){const e=["Sun","Mon","Tue","Wen","Thu","Fri","Sat"][t.getDay()],n=t.getDate(),s=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t.getMonth()],o=t.getFullYear(),i=t.getHours();let a=t.getMinutes().toString();return a.length<2&&(a="0"+a),`${e}   ${n} ${s} ${o}   ${i}:${a}`}(e),i.append(this.statusElem,d)}deleteNote(){const t=JSON.parse(localStorage.getItem("notes")),e=t.findIndex((t=>t.id===this.id));t.splice(e,1);const n=JSON.stringify(t);localStorage.setItem("notes",n),this.container.remove()}markNoteAsDone(){const t=JSON.parse(localStorage.getItem("notes"));t.find((t=>t.id===this.id)).status="Done",this.statusElem.classList.remove("note__status_active"),this.statusElem.classList.add("note__status_done"),this.buttonDone.setAttribute("disabled","true"),this.buttonDelete.setAttribute("disabled","true"),this.statusElem.textContent="Done";const e=JSON.stringify(t);localStorage.setItem("notes",e)}}},62:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Warning=void 0,n(502),e.Warning=class{constructor(t){this.container=document.createElement("div"),this.container.classList.add("warning"),this.button=document.createElement("button"),this.button.classList.add("warning__button"),this.button.addEventListener("click",(()=>{this.container.classList.remove("warning_visible"),t.removeAttribute("disabled")}));const e=document.createElement("p");e.classList.add("warning__text"),e.textContent="Sorry, you already have this task!";const n=document.createElement("p");n.classList.add("warning__text"),n.textContent="You can't create it agian until it isn't done/deleted :(",this.container.append(this.button,e,n)}}}},e={};function n(s){var o=e[s];if(void 0!==o)return o.exports;var i=e[s]={exports:{}};return t[s](i,i.exports,n),i.exports}n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{const t=n(752);n(387),n(948);const e=document.querySelector("body"),s=new t.App;e.appendChild(s.appRoot)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,