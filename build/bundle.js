(()=>{"use strict";var t={389:(t,e,s)=>{s.r(e)},100:(t,e,s)=>{s.r(e)},629:(t,e,s)=>{s.r(e)},35:(t,e,s)=>{s.r(e)},948:(t,e,s)=>{s.r(e)},387:(t,e,s)=>{s.r(e)},395:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.api=void 0;const a=s(570);e.api=new a.default},570:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){const t=localStorage.getItem("tasks");this.tasksArr=JSON.parse(t),this.tasksArr&&this.tasksArr.length||(this.tasksArr=[{id:1,note:"Create new task",status:"active",date:new Date}]),this.tasksArr.map((t=>Object.assign(Object.assign({},t),{date:new Date(t.date)})))}getAll(){return this.updateStoredData(),new Promise((t=>{setTimeout((()=>{t(this.tasksArr)}),500)}))}add(t){return new Promise((e=>{setTimeout((()=>{this.tasksArr?this.tasksArr.push(t):this.tasksArr=[t],e(t),this.updateStoredData()}),1e3)}))}remove(t){return new Promise((e=>{this.tasksArr=this.tasksArr.filter((e=>e.id!==t)),this.updateStoredData(),setTimeout((()=>{e(t)}),1e3)}))}update(t){return this.findTask(t.id).status=t.status,new Promise((e=>{setTimeout((()=>{e(t),this.updateStoredData()}),1e3)}))}updateStoredData(){localStorage.setItem("tasks",JSON.stringify(this.tasksArr))}findTask(t){return this.tasksArr.find((e=>e.id===t))}}},954:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(e){const s=t.getState();t.updateState(function(t,e){switch(e.type){case"LOAD_INITIAL_TASKS":return Object.assign(Object.assign({},t),{loadingState:!1,tasks:e.payload});case"ADD_NOTE":return Object.assign(Object.assign({},t),{loadingState:!1,tasks:[...t.tasks,e.payload]});case"DELETE_NOTE":return Object.assign(Object.assign({},t),{loadingState:!1,tasks:t.tasks.filter((t=>t.id!==e.payload))});case"CHANGE_NOTE_STATUS":return Object.assign(Object.assign({},t),{loadingTasks:t.loadingTasks.filter((t=>t!==e.payload.id)),tasks:t.tasks.map((t=>t.id===e.payload.id?Object.assign(Object.assign({},t),{status:e.payload.status}):t))});case"CHANGE_FILTER":return Object.assign(Object.assign({},t),{filter:e.payload});case"CHANGE_IS_REVERSED":return Object.assign(Object.assign({},t),{isReversed:e.payload});case"LOADING_STATE":return Object.assign(Object.assign({},t),{loadingState:e.payload});case"NOTE_LOADING_STATE":let s=t.loadingTasks.slice(0);return e.payload.state?s.push(e.payload.id):s=s.filter((t=>t!==e.payload.id)),Object.assign(Object.assign({},t),{loadingTasks:s});default:return t}}(JSON.parse(JSON.stringify(s)),e))}}},586:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.subscribers=[],this.state=t}forcedConstructor(t){this.state=t}getState(){return this.state}updateState(t){this.state=t,this.subscribers.forEach((t=>{t(this.state)}))}subscribe(t){this.subscribers.push(t)}forceUpdate(){this.subscribers.forEach((t=>{t(this.state)}))}}},584:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),s(389);const a=s(593),n=s(395);e.default=class{constructor(t){this.element=(0,a.createHtmlElement)("div",["form"]),this.dispatch=t}createDOMElement(){this.element.innerHTML="",this.wrap=(0,a.createHtmlElement)("div",["form__wrap"]),this.input=(0,a.createHtmlElement)("input",["form__input"]),this.input.setAttribute("type","textarea"),this.input.setAttribute("required","true"),this.buttonAdd=(0,a.createHtmlElement)("button",["form__button"],"Add"),this.buttonAdd.setAttribute("type","submit"),this.buttonAdd.setAttribute("disabled","true"),this.counter=document.createElement("p"),this.counter.classList.add("board__counter"),this.counterValue=0,this.counter.textContent=`${this.counterValue}/55`,this.lengthWarning=(0,a.createHtmlElement)("p",["form__counter_error","form__warning"],"Note should contain from 5 to 55 symbols"),this.bindedHandleInputValidation=this.handleInputValidation.bind(this),this.bindedHandleCreateNote=this.handleCreateNote.bind(this),this.input.addEventListener("input",this.bindedHandleInputValidation),this.buttonAdd.addEventListener("click",this.bindedHandleCreateNote),this.wrap.append(this.input,this.counter,this.lengthWarning,this.buttonAdd),this.element.appendChild(this.wrap)}onStateUpdate(t){this.clearHandlers(),t.tasks?(this.tasksArray=t.tasks.slice(0),this.createDOMElement()):this.tasksArray=[]}getView(){return this.element}inputValidation(t,e,s){""===t.value?(this.counterValue=0,this.taskText=""):(this.counterValue=t.value.length,this.counterValue>=55&&(t.value=this.taskText),this.taskText=t.value[0].toUpperCase()+t.value.slice(1),t.value=this.taskText,this.counterValue<5?(e.classList.add("form__counter_error"),s.classList.add("form__warning_visible"),this.buttonAdd.setAttribute("disabled","true")):(e.classList.remove("form__counter_error"),s.classList.remove("form__warning_visible"),this.buttonAdd.removeAttribute("disabled"))),e.textContent=`${this.counterValue}/55`}handleInputValidation(){this.inputValidation(this.input,this.counter,this.lengthWarning)}handleCreateNote(){this.createNewNote(this.tasksArray)}clearHandlers(){this.input&&this.input.removeEventListener("input",this.bindedHandleInputValidation),this.buttonAdd&&this.buttonAdd.removeEventListener("click",this.bindedHandleCreateNote)}createNewNote(t){t.sort(((t,e)=>new Date(t.date).getTime()-new Date(e.date).getTime()));const e={id:t.length?t[t.length-1].id+1:1,note:this.taskText,status:"active",date:new Date};this.dispatch({type:"LOADING_STATE",payload:!0}),n.api.add(e).then((t=>{this.dispatch({type:"ADD_NOTE",payload:t})}))}}},348:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),s(100);const a=s(593),n=s(42);e.default=class{constructor(t){this.spinner=null,this.dispatch=t,this.element=(0,a.createHtmlElement)("div",["list"])}onStateUpdate(t){if(t.tasks){const e=t.loadingState;this.currentLength!==t.tasks.length||this.filter!==t.filter||this.isReversed!==t.isReversed?(this.updateList(t),this.spinner=null):this.taskInstances.forEach((e=>e.onStateUpdate(t))),e&&!this.spinner&&this.addSpinner(),this.spinner&&!t.loadingState&&this.removeSpinner()}}getView(){return this.element}updateList(t){this.filter=t.filter,this.isReversed=t.isReversed,this.taskInstances&&this.taskInstances.forEach((t=>{t.clearHandlers()})),this.createTasksList(t.tasks)}addSpinner(){this.spinner=(0,a.createHtmlElement)("div",["task__spinner"]);const t=(0,a.createHtmlElement)("h3",["task__spinner__text"],"Loading..."),e=(0,a.createHtmlElement)("div",["task__spinner_wrap"]);this.spinner.append(e),e.append(t),this.wrap.append(this.spinner)}removeSpinner(){this.spinner.remove(),this.spinner=null}createTasksList(t){if(this.element.innerHTML="",this.currentLength=0,this.wrap=(0,a.createHtmlElement)("div",["list__wrap"]),t){let e=[];e="active"===this.filter?this.createTaskElements(t,"active"):"done"===this.filter?this.createTaskElements(t,"done"):this.createTaskElements(t,"all"),e.forEach((t=>this.wrap.append(t))),this.element.appendChild(this.wrap)}}createTaskElements(t,e){const s=[];return this.sortElementsByDate(t),this.taskInstances=[],t.forEach((t=>{if("all"===e||t.status===e){const e=new n.default(t,this.dispatch);s.push(e.getView()),this.currentLength++,this.taskInstances.push(e)}})),s}sortElementsByDate(t){this.isReversed?t.sort(((t,e)=>new Date(t.date).getTime()-new Date(e.date).getTime())):t.sort(((t,e)=>new Date(e.date).getTime()-new Date(t.date).getTime()))}}},678:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),s(629);const a=s(593);e.default=class{constructor(t){this.isReversed=!1,this.dispatch=t,this.element=(0,a.createHtmlElement)("div",["nav"]),this.createDOMElement(),this.buttonAll.classList.add("nav__button_selected")}getView(){return this.element}onStateUpdate(t){switch([this.buttonAll,this.buttonActive,this.buttonDone].forEach((t=>t.classList.remove("nav__button_selected"))),t.filter){case"active":this.buttonActive.classList.add("nav__button_selected");break;case"done":this.buttonDone.classList.add("nav__button_selected");break;default:this.buttonAll.classList.add("nav__button_selected")}switch(t.isReversed){case!0:this.buttonReserse.classList.add("nav__button_selected");break;case!1:this.buttonReserse.classList.remove("nav__button_selected")}}createDOMElement(){this.element.childNodes.forEach((t=>t.remove)),this.filterWrap=(0,a.createHtmlElement)("div",["nav__container"]),this.buttonAll=(0,a.createHtmlElement)("button",["nav__button"],"All","all"),this.buttonActive=(0,a.createHtmlElement)("button",["nav__button"],"Active","active"),this.buttonDone=(0,a.createHtmlElement)("button",["nav__button"],"Done","done"),this.buttonReserse=(0,a.createHtmlElement)("button",["nav__button","nav__reverse"]),this.element.append(this.filterWrap,this.buttonReserse),this.filterWrap.append(this.buttonAll,this.buttonActive,this.buttonDone),[this.buttonAll,this.buttonActive,this.buttonDone].forEach((t=>t.addEventListener("click",(()=>{this.dispatch({type:"CHANGE_FILTER",payload:t.dataset.name})})))),this.buttonReserse.addEventListener("click",(()=>{switch(this.isReversed){case!0:this.isReversed=!1,this.buttonReserse.classList.remove("nav__button_selected");break;case!1:this.isReversed=!0,this.buttonReserse.classList.add("nav__button_selected")}this.dispatch({type:"LOADING_STATE",payload:!0}),this.dispatch({type:"CHANGE_IS_REVERSED",payload:this.isReversed}),this.dispatch({type:"LOADING_STATE",payload:!1})}))}}},42:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),s(35);const a=s(593),n=s(395);e.default=class{constructor(t,e){this.status=t.status,this.dispatch=e,this.id=t.id,this.element=(0,a.createHtmlElement)("div",["task"]),this.createDOMElement(t)}getView(){return this.element}onStateUpdate(t){const e=t.loadingTasks.includes(this.id),s=t.tasks.find((t=>t.id===this.id)).status;this.status!==s&&this.updateTaskElement(t),e&&!this.spinner?this.addSpinner():!e&&this.spinner&&this.removeSpinner()}createDOMElement(t){this.taskData=t,this.element.innerHTML="",this.wrap=(0,a.createHtmlElement)("div",["task__wrap"]);const e=(0,a.createHtmlElement)("div",["task__container_inner"]),s=(0,a.createHtmlElement)("div",["task__container_inner"]),n=(0,a.createHtmlElement)("h2",["task__text"],t.note),i=(0,a.createHtmlElement)("div",["task__container_buttons"]);let r;switch(this.buttonDone=(0,a.createHtmlElement)("button",["task__button"],"Done"),this.buttonDelete=(0,a.createHtmlElement)("button",["task__button"],"Delete"),t.status){case"active":this.buttonDone=(0,a.createHtmlElement)("button",["task__button"],"Done","done"),this.buttonDelete=(0,a.createHtmlElement)("button",["task__button"],"Delete"),r=(0,a.createHtmlElement)("p",["task__status","task__status_active"],"Active");break;case"done":this.buttonDone=(0,a.createHtmlElement)("button",["task__button","task__button_done"],"Undo","active"),this.buttonDelete=(0,a.createHtmlElement)("button",["task__button","task__button_done"],"Delete"),r=(0,a.createHtmlElement)("p",["task__status","task__status_done"],"Done")}const d=(0,a.createHtmlElement)("p",["task__date"],(0,a.getPrettyDate)(t.date));this.element.appendChild(this.wrap),this.wrap.append(e,s),e.append(n,i),i.append(this.buttonDone,this.buttonDelete),s.append(r,d),this.bindedHandleDelete=this.handleDelete.bind(this),this.bindedHandleDone=this.handleDone.bind(this),this.buttonDone.addEventListener("click",this.bindedHandleDone),this.buttonDelete.addEventListener("click",this.bindedHandleDelete)}handleDelete(){this.dispatch({type:"LOADING_STATE",payload:!0}),n.api.remove(this.id).then((t=>new Promise((e=>{this.dispatch({type:"DELETE_NOTE",payload:t})}))))}handleDone(){this.taskData.status=this.buttonDone.dataset.name,this.dispatch({type:"NOTE_LOADING_STATE",payload:{id:this.id,state:!0}}),n.api.update(this.taskData).then((t=>{this.dispatch({type:"CHANGE_NOTE_STATUS",payload:{id:t.id,status:t.status}})}))}clearHandlers(){this.buttonDelete&&this.buttonDelete.removeEventListener("click",this.bindedHandleDelete),this.buttonDone&&this.buttonDone.removeEventListener("click",this.bindedHandleDone)}addSpinner(){this.spinner=(0,a.createHtmlElement)("div",["task__spinner"]);const t=(0,a.createHtmlElement)("h3",["task__spinner__text"],"Loading..."),e=(0,a.createHtmlElement)("div",["task__spinner_wrap"]);this.spinner.append(e),e.append(t),this.element.append(this.spinner)}removeSpinner(){this.spinner.remove(),this.spinner=null}updateTaskElement(t){this.clearHandlers(),this.status=t.tasks.find((t=>t.id===this.id)).status,this.createDOMElement(t.tasks.find((t=>t.id===this.id)))}}},593:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getPrettyDate=e.createHtmlElement=void 0,e.createHtmlElement=function(t,e,s,a){const n=document.createElement(t);return e.forEach((t=>n.classList.add(t))),s&&(n.textContent=s),a&&(n.dataset.name=a),n},e.getPrettyDate=function(t){"string"==typeof t&&(t=new Date(t));const e=["Sun","Mon","Tue","Wen","Thu","Fri","Sat"][t.getDay()],s=t.getDate(),a=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t.getMonth()],n=t.getFullYear(),i=t.getHours();let r=t.getMinutes().toString();return r.length<2&&(r="0"+r),`${e}   ${s} ${a} ${n}   ${i}:${r}`}}},e={};function s(a){var n=e[a];if(void 0!==n)return n.exports;var i=e[a]={exports:{}};return t[a](i,i.exports,s),i.exports}s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{s(387),s(948);const t=s(593),e=s(954),a=s(584),n=s(348),i=s(678),r=s(586),d=s(395),l=document.querySelector("body"),o=(0,t.createHtmlElement)("div",["app"]);l.append(o);const h=(0,t.createHtmlElement)("h1",["app__title"],"To-do List"),c=(0,t.createHtmlElement)("div",["app__container"]);o.append(h,c);const u=new r.default({filter:"all",tasks:[],loadingState:!1,loadingTasks:[],isReversed:!1}),p=(0,e.default)(u);[new i.default(p),new n.default(p),new a.default(p)].forEach((t=>{u.subscribe(t.onStateUpdate.bind(t)),c.append(t.getView())})),p({type:"LOADING_STATE",payload:!0}),d.api.getAll().then((t=>{p({type:"LOAD_INITIAL_TASKS",payload:t})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,