(()=>{"use strict";var t={188:(t,e,n)=>{n.r(e)},540:(t,e,n)=>{n.r(e)},406:(t,e,n)=>{n.r(e)},121:(t,e,n)=>{n.r(e)},502:(t,e,n)=>{n.r(e)},948:(t,e,n)=>{n.r(e)},387:(t,e,n)=>{n.r(e)},752:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.App=void 0,n(387);const s=n(926),o=n(402),i=n(223),a=n(112);e.App=class{constructor(){this.appRoot=document.createElement("div"),this.appRoot.classList.add("app");const t=document.createElement("h1");t.classList.add("app__title");const e=document.createElement("div");e.classList.add("app__container"),this.appRoot.append(t,e),t.textContent="To-do List";const n=new Date;n.setMonth(0,1),n.setHours(11,20);const o=new Date;o.setMonth(0,10),o.setHours(15,5);const r=[{note:"Create new tasks",status:"Active",date:o},{note:"Create to-do list app",status:"Done",date:n}];if(null==localStorage.getItem("notes")){const t=JSON.stringify(r);localStorage.setItem("notes",t)}const d=new s.Nav;this.list=new a.List;const c=new i.Form,l=this.handleNoteSubmit.bind(this);c.onFormSubmit(l),d.onFilterChange(this.handleFilterChange.bind(this)),e.append(d.container,this.list.container,c.container)}handleNoteSubmit(t){const e=new o.Note(t.note,t.date,t.status);this.list.addNote(e)}handleFilterChange(t,e){this.list.renderNotes(t,e),this.list.isReversed=e}}},223:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Form=void 0,n(188);const s=n(62);e.Form=class{constructor(){this.handler=null,this.container=document.createElement("div"),this.container.classList.add("board");const t=document.createElement("input");t.setAttribute("type","textarea"),t.setAttribute("required","true"),t.classList.add("board__input"),this.buttonAdd=document.createElement("button"),this.buttonAdd.classList.add("board__button"),this.buttonAdd.setAttribute("type","submit"),this.buttonAdd.textContent="Add",this.buttonAdd.setAttribute("disabled","true");const e=document.createElement("p");e.classList.add("board__counter"),this.counterValue=0,e.textContent=`${this.counterValue}/55`;const n=document.createElement("p");n.classList.add("board__counter_error","board__warning"),n.textContent="Note should contain from 5 to 55 symbols";const o=new s.Warning(this.buttonAdd);this.container.append(t,e,n,this.buttonAdd,o.container),t.addEventListener("input",(()=>this.countAndUpgradeInput(t,e,n))),this.buttonAdd.addEventListener("click",(e=>{e.preventDefault();const n=JSON.parse(localStorage.getItem("notes"));if(!1===this.checkNoteDuples(n,o.container)){const e=this.createNewNote(n);this.handler&&this.handler(e),t.value="",this.counterValue=0,this.noteText=""}}))}countAndUpgradeInput(t,e,n){""===t.value?(this.counterValue=0,this.noteText=""):(this.counterValue=t.value.length,this.counterValue>=55&&(t.value=this.noteText),this.noteText=t.value[0].toUpperCase()+t.value.slice(1),t.value=this.noteText,this.counterValue<5?(e.classList.add("board__counter_error"),n.classList.add("board__warning_visible"),this.buttonAdd.setAttribute("disabled","true")):(e.classList.remove("board__counter_error"),n.classList.remove("board__warning_visible"),this.buttonAdd.removeAttribute("disabled"))),e.textContent=`${this.counterValue}/55`}checkNoteDuples(t,e){let n=t.find((t=>t.note===this.noteText));return void 0!==n&&"Active"===n.status&&(e.classList.add("warning_visible"),this.buttonAdd.setAttribute("disabled","true"),!0)}createNewNote(t){const e={note:this.noteText,status:"Active",date:new Date};return t.push(e),localStorage.setItem("notes",JSON.stringify(t)),e}onFormSubmit(t){this.handler=t}}},112:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.List=void 0,n(540);const s=n(402);e.List=class{constructor(){this.isReversed=!1,this.container=document.createElement("div"),this.container.classList.add("list"),this.renderNotes("All",!1)}getFromLocalStorage(){this.notesArr=JSON.parse(localStorage.getItem("notes")).map((t=>Object.assign(Object.assign({},t),{date:new Date(t.date)})))}renderNotes(t,e){for(;this.container.firstChild;)this.container.removeChild(this.container.firstChild);this.getFromLocalStorage(),"Active"===t?this.notesArr=this.notesArr.filter((t=>"Active"===t.status)):"Done"===t&&(this.notesArr=this.notesArr.filter((t=>"Done"===t.status))),e?this.notesArr.sort(((t,e)=>t.date>e.date?1:-1)):this.notesArr.sort(((t,e)=>t.date<e.date?1:-1)),this.notesArr.forEach((t=>{const e=new s.Note(t.note,t.date,t.status);this.container.appendChild(e.container)}))}addNote(t){!0===this.isReversed?this.container.appendChild(t.container):this.container.prepend(t.container)}}},926:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Nav=void 0,n(406),e.Nav=class{constructor(){this.filter="All",this.isReversed=!1,this.handler=null,this.container=document.createElement("div"),this.container.classList.add("nav"),this.buttonsContainer=document.createElement("div"),this.buttonsContainer.classList.add("nav__container"),this.buttonReverse=document.createElement("button"),this.buttonReverse.classList.add("nav__button"),this.container.append(this.buttonsContainer,this.buttonReverse);const t=document.createElement("div");t.classList.add("nav__reverse"),this.buttonReverse.appendChild(t),this.buttonReverse.addEventListener("click",(()=>{!1===this.isReversed?this.isReversed=!0:this.isReversed=!1,this.handler(this.filter,this.isReversed)})),this.buttonAll=document.createElement("button"),this.buttonAll.classList.add("nav__button","nav__button_selected"),this.selectedButton=this.buttonAll,this.buttonAll.textContent="All",this.setFilterOnClick(this.buttonAll,"All"),this.buttonToDo=document.createElement("button"),this.buttonToDo.classList.add("nav__button"),this.buttonToDo.textContent="Active",this.setFilterOnClick(this.buttonToDo,"Active"),this.buttonDone=document.createElement("button"),this.buttonDone.classList.add("nav__button"),this.buttonDone.textContent="Done",this.setFilterOnClick(this.buttonDone,"Done"),this.buttonsContainer.append(this.buttonAll,this.buttonToDo,this.buttonDone)}onFilterChange(t){this.handler=t}setFilterOnClick(t,e){t.addEventListener("click",(()=>{this.selectedButton.classList.remove("nav__button_selected"),this.filter=e,this.selectedButton=t,t.classList.add("nav__button_selected"),this.handler(this.filter,this.isReversed)}))}}},402:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Note=void 0,n(121),e.Note=class{constructor(t,e,n){this.filter="All",this.container=document.createElement("div"),this.container.classList.add("note");const s=document.createElement("div");s.classList.add("note__container_inner");const o=document.createElement("div");o.classList.add("note__container_inner"),this.container.append(s,o);const i=document.createElement("h2");i.classList.add("note__text"),i.textContent=t,this.noteText=t;const a=document.createElement("div");a.classList.add("note__container_buttons"),s.append(i,a),this.buttonDelete=document.createElement("button"),this.buttonDelete.classList.add("note__button"),this.buttonDelete.textContent="Delete",this.buttonDelete.addEventListener("click",(()=>this.deleteNote())),this.buttonDone=document.createElement("button"),this.buttonDone.classList.add("note__button"),this.buttonDone.textContent="Done",this.buttonDone.addEventListener("click",(()=>this.markNoteAsDone())),a.append(this.buttonDone,this.buttonDelete),this.statusElem=document.createElement("p"),this.statusElem.classList.add("note__status"),this.statusElem.textContent=n,"Active"===n?this.statusElem.classList.add("note__status_active"):(this.statusElem.classList.add("note__status_done"),this.buttonDone.setAttribute("disabled","true"),this.buttonDelete.setAttribute("disabled","true"));const r=document.createElement("p");r.classList.add("note__date"),r.textContent=function(t){const e=["Sun","Mon","Tue","Wen","Thu","Fri","Sat"][t.getDay()],n=t.getDate(),s=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][t.getMonth()],o=t.getFullYear(),i=t.getHours();let a=t.getMinutes().toString();return a.length<2&&(a="0"+a),`${e}   ${n} ${s} ${o}   ${i}:${a}`}(e),o.append(this.statusElem,r)}deleteNote(){const t=JSON.parse(localStorage.getItem("notes")),e=t.findIndex((t=>t.note===this.noteText));t.splice(e,1);const n=JSON.stringify(t);localStorage.setItem("notes",n),this.container.remove()}markNoteAsDone(){const t=JSON.parse(localStorage.getItem("notes"));t.find((t=>t.note===this.noteText)).status="Done",this.statusElem.classList.remove("note__status_active"),this.statusElem.classList.add("note__status_done"),this.buttonDone.setAttribute("disabled","true"),this.buttonDelete.setAttribute("disabled","true"),this.statusElem.textContent="Done";const e=JSON.stringify(t);localStorage.setItem("notes",e)}}},62:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Warning=void 0,n(502),e.Warning=class{constructor(t){this.container=document.createElement("div"),this.container.classList.add("warning"),this.button=document.createElement("button"),this.button.classList.add("warning__button"),this.button.addEventListener("click",(()=>{this.container.classList.remove("warning_visible"),t.removeAttribute("disabled")}));const e=document.createElement("p");e.classList.add("warning__text"),e.textContent="Sorry, you already have this task!";const n=document.createElement("p");n.classList.add("warning__text"),n.textContent="You can't create it agian until it isn't done/deleted :(",this.container.append(this.button,e,n)}}}},e={};function n(s){var o=e[s];if(void 0!==o)return o.exports;var i=e[s]={exports:{}};return t[s](i,i.exports,n),i.exports}n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{const t=n(752);n(387),n(948);const e=document.querySelector("body"),s=new t.App;e.appendChild(s.appRoot)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Oi8vb2x5YWxhc3MvLi9zcmMvYXBwLnRzIiwid2VicGFjazovL29seWFsYXNzLy4vc3JjL2NvbXBvbmVudHMvZm9ybS9pbmRleC50cyIsIndlYnBhY2s6Ly9vbHlhbGFzcy8uL3NyYy9jb21wb25lbnRzL2xpc3QvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vb2x5YWxhc3MvLi9zcmMvY29tcG9uZW50cy9uYXYvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vb2x5YWxhc3MvLi9zcmMvY29tcG9uZW50cy9ub3RlL2luZGV4LnRzIiwid2VicGFjazovL29seWFsYXNzLy4vc3JjL2NvbXBvbmVudHMvd2FybmluZy9pbmRleC50cyIsIndlYnBhY2s6Ly9vbHlhbGFzcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vbHlhbGFzcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL29seWFsYXNzLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vc3R5bGVzLnNjc3NcIjtcbmltcG9ydCB7IE5hdiB9IGZyb20gXCIuL2NvbXBvbmVudHMvbmF2XCI7XG5pbXBvcnQgeyBOb3RlIH0gZnJvbSBcIi4vY29tcG9uZW50cy9ub3RlXCI7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSBcIi4vY29tcG9uZW50cy9mb3JtXCI7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9saXN0XCI7XG5pbXBvcnQgeyBEYXRhT2JqLCBGaWx0ZXIgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgQXBwIHtcbiAgYXBwUm9vdDogSFRNTERpdkVsZW1lbnQ7XG4gIGxpc3Q6IExpc3Q7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hcHBSb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmFwcFJvb3QuY2xhc3NMaXN0LmFkZChcImFwcFwiKTtcblxuICAgIGNvbnN0IGFwcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgIGFwcFRpdGxlLmNsYXNzTGlzdC5hZGQoXCJhcHBfX3RpdGxlXCIpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJhcHBfX2NvbnRhaW5lclwiKTtcblxuICAgIHRoaXMuYXBwUm9vdC5hcHBlbmQoYXBwVGl0bGUsIGNvbnRhaW5lcik7XG4gICAgYXBwVGl0bGUudGV4dENvbnRlbnQgPSBcIlRvLWRvIExpc3RcIjtcblxuICAgIGNvbnN0IGRhdGUxID0gbmV3IERhdGUoKTtcbiAgICBkYXRlMS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlMS5zZXRIb3VycygxMSwgMjApO1xuXG4gICAgY29uc3QgZGF0ZTIgPSBuZXcgRGF0ZSgpO1xuICAgIGRhdGUyLnNldE1vbnRoKDAsIDEwKTtcbiAgICBkYXRlMi5zZXRIb3VycygxNSwgNSk7XG5cbiAgICBjb25zdCBub3Rlc0FycjogQXJyYXk8RGF0YU9iaj4gPSBbXG4gICAgICB7XG4gICAgICAgIG5vdGU6IFwiQ3JlYXRlIG5ldyB0YXNrc1wiLFxuICAgICAgICBzdGF0dXM6XCJBY3RpdmVcIiwgXG4gICAgICAgIGRhdGU6IGRhdGUyXG4gICAgICB9LCBcblxuICAgICAge1xuICAgICAgICBub3RlOiBcIkNyZWF0ZSB0by1kbyBsaXN0IGFwcFwiLFxuICAgICAgICBzdGF0dXM6IFwiRG9uZVwiLFxuICAgICAgICBkYXRlOiBkYXRlMVxuICAgICAgfVxuICAgIF07XG5cbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJub3Rlc1wiKSA9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG5vdGVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG5vdGVzQXJyKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibm90ZXNcIiwgbm90ZXNKc29uKTtcbiAgICB9XG5cbiAgICBjb25zdCBuYXZpZ2F0aW9uID0gbmV3IE5hdigpO1xuICAgIHRoaXMubGlzdCA9IG5ldyBMaXN0KCk7XG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtKCk7XG4gICAgY29uc3QgYmluZGVkTWV0aG9kID0gdGhpcy5oYW5kbGVOb3RlU3VibWl0LmJpbmQodGhpcyk7XG4gICAgZm9ybS5vbkZvcm1TdWJtaXQoYmluZGVkTWV0aG9kKTtcbiAgICBuYXZpZ2F0aW9uLm9uRmlsdGVyQ2hhbmdlKHRoaXMuaGFuZGxlRmlsdGVyQ2hhbmdlLmJpbmQodGhpcykpO1xuXG4gICAgY29udGFpbmVyLmFwcGVuZChuYXZpZ2F0aW9uLmNvbnRhaW5lciwgdGhpcy5saXN0LmNvbnRhaW5lciwgZm9ybS5jb250YWluZXIpO1xuXG4gIH1cblxuICBoYW5kbGVOb3RlU3VibWl0KG5vdGVEYXRhOiBEYXRhT2JqKSB7XG4gICAgY29uc3QgbmV3Tm90ZSA9IG5ldyBOb3RlKG5vdGVEYXRhLm5vdGUsIG5vdGVEYXRhLmRhdGUsIG5vdGVEYXRhLnN0YXR1cyk7XG4gICAgdGhpcy5saXN0LmFkZE5vdGUobmV3Tm90ZSk7XG4gIH1cblxuICBoYW5kbGVGaWx0ZXJDaGFuZ2Uoc3RhdHVzRmlsdGVyOiBGaWx0ZXIsIGlzUmV2ZXJzZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmxpc3QucmVuZGVyTm90ZXMoc3RhdHVzRmlsdGVyLCBpc1JldmVyc2VkKTtcbiAgICB0aGlzLmxpc3QuaXNSZXZlcnNlZCA9IGlzUmV2ZXJzZWQ7XG4gIH1cbn1cblxuIiwiaW1wb3J0IFwiLi9zdHlsZXMuc2Nzc1wiO1xuaW1wb3J0IHsgRGF0YU9iaiwgU3VibWl0SGFuZGxlciB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuaW1wb3J0IHsgV2FybmluZyB9IGZyb20gXCIuLi93YXJuaW5nXCI7XG5cblxuXG5leHBvcnQgY2xhc3MgRm9ybSB7XG4gIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gIHByaXZhdGUgYnV0dG9uQWRkOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgcHJpdmF0ZSBub3RlVGV4dDogc3RyaW5nO1xuICBwcml2YXRlIGNvdW50ZXJWYWx1ZTogbnVtYmVyO1xuICBoYW5kbGVyOiBTdWJtaXRIYW5kbGVyIHwgbnVsbCA9IG51bGxcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImJvYXJkXCIpO1xuXG4gICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRhcmVhXCIpO1xuICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInJlcXVpcmVkXCIsIFwidHJ1ZVwiKTtcbiAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKFwiYm9hcmRfX2lucHV0XCIpO1xuXG4gICAgdGhpcy5idXR0b25BZGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHRoaXMuYnV0dG9uQWRkLmNsYXNzTGlzdC5hZGQoXCJib2FyZF9fYnV0dG9uXCIpO1xuICAgIHRoaXMuYnV0dG9uQWRkLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJzdWJtaXRcIik7XG4gICAgdGhpcy5idXR0b25BZGQudGV4dENvbnRlbnQgPSBcIkFkZFwiO1xuICAgIHRoaXMuYnV0dG9uQWRkLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcbiAgICBcbiAgICBjb25zdCBjb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgY291bnRlci5jbGFzc0xpc3QuYWRkKFwiYm9hcmRfX2NvdW50ZXJcIik7XG4gICAgdGhpcy5jb3VudGVyVmFsdWUgPSAwO1xuICAgIGNvdW50ZXIudGV4dENvbnRlbnQgPSBgJHt0aGlzLmNvdW50ZXJWYWx1ZX0vNTVgO1xuICAgIGNvbnN0IGxlbmd0aFdhcm5pbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICBsZW5ndGhXYXJuaW5nLmNsYXNzTGlzdC5hZGQoXCJib2FyZF9fY291bnRlcl9lcnJvclwiLCBcImJvYXJkX193YXJuaW5nXCIpO1xuICAgIGxlbmd0aFdhcm5pbmcudGV4dENvbnRlbnQgPSBcIk5vdGUgc2hvdWxkIGNvbnRhaW4gZnJvbSA1IHRvIDU1IHN5bWJvbHNcIjtcbiAgICBjb25zdCB3YXJuaW5nQWxlcnQgPSBuZXcgV2FybmluZyh0aGlzLmJ1dHRvbkFkZCk7XG4gICAgXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGlucHV0LCBjb3VudGVyLCBsZW5ndGhXYXJuaW5nLCB0aGlzLmJ1dHRvbkFkZCwgd2FybmluZ0FsZXJ0LmNvbnRhaW5lcik7XG5cbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4gdGhpcy5jb3VudEFuZFVwZ3JhZGVJbnB1dChpbnB1dCwgY291bnRlciwgbGVuZ3RoV2FybmluZykpO1xuICAgIHRoaXMuYnV0dG9uQWRkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZGF0YUFycmF5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIm5vdGVzXCIpKTtcbiAgICAgIGlmICh0aGlzLmNoZWNrTm90ZUR1cGxlcyhkYXRhQXJyYXksIHdhcm5pbmdBbGVydC5jb250YWluZXIpPT09ZmFsc2UpIHtcbiAgICAgICAgY29uc3QgbmV3Tm90ZSA9IHRoaXMuY3JlYXRlTmV3Tm90ZShkYXRhQXJyYXkpO1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVyKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVyKG5ld05vdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgdGhpcy5jb3VudGVyVmFsdWUgPSAwO1xuICAgICAgICB0aGlzLm5vdGVUZXh0ID0gXCJcIjtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBjb3VudEFuZFVwZ3JhZGVJbnB1dChpbnB1dEVsZW06SFRNTElucHV0RWxlbWVudCwgd2FybkVsZW0xOiBIVE1MUGFyYWdyYXBoRWxlbWVudCwgd2FybUVsZW0yOkhUTUxQYXJhZ3JhcGhFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKGlucHV0RWxlbS52YWx1ZT09PVwiXCIpIHtcbiAgICAgIHRoaXMuY291bnRlclZhbHVlID0gMDtcbiAgICAgIHRoaXMubm90ZVRleHQgPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvdW50ZXJWYWx1ZSA9IGlucHV0RWxlbS52YWx1ZS5sZW5ndGg7XG4gICAgICBpZiAodGhpcy5jb3VudGVyVmFsdWUgPj0gNTUpIGlucHV0RWxlbS52YWx1ZSA9IHRoaXMubm90ZVRleHQ7XG4gICAgICB0aGlzLm5vdGVUZXh0ID0gaW5wdXRFbGVtLnZhbHVlWzBdLnRvVXBwZXJDYXNlKCkgKyBpbnB1dEVsZW0udmFsdWUuc2xpY2UoMSk7XG4gICAgICBpbnB1dEVsZW0udmFsdWUgPSB0aGlzLm5vdGVUZXh0O1xuICAgICAgaWYgKHRoaXMuY291bnRlclZhbHVlIDwgNSkge1xuICAgICAgICB3YXJuRWxlbTEuY2xhc3NMaXN0LmFkZChcImJvYXJkX19jb3VudGVyX2Vycm9yXCIpO1xuICAgICAgICB3YXJtRWxlbTIuY2xhc3NMaXN0LmFkZChcImJvYXJkX193YXJuaW5nX3Zpc2libGVcIik7XG4gICAgICAgIHRoaXMuYnV0dG9uQWRkLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybkVsZW0xLmNsYXNzTGlzdC5yZW1vdmUoXCJib2FyZF9fY291bnRlcl9lcnJvclwiKTtcbiAgICAgICAgd2FybUVsZW0yLmNsYXNzTGlzdC5yZW1vdmUoXCJib2FyZF9fd2FybmluZ192aXNpYmxlXCIpO1xuICAgICAgICB0aGlzLmJ1dHRvbkFkZC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgIH07XG4gICAgfTtcbiAgICB3YXJuRWxlbTEudGV4dENvbnRlbnQgPSBgJHt0aGlzLmNvdW50ZXJWYWx1ZX0vNTVgO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja05vdGVEdXBsZXMoZGF0YUFycmF5OiBBcnJheTxEYXRhT2JqPiwgd2FybkFsZXJ0RWxlbTogSFRNTERpdkVsZW1lbnQpOiBib29sZWFuIHtcbiAgICBsZXQgZXhpc3RpbmdOb3RlID0gZGF0YUFycmF5LmZpbmQoZGF0YUFycmF5ID0+IGRhdGFBcnJheS5ub3RlID09PSB0aGlzLm5vdGVUZXh0KTtcbiAgICBpZiAoZXhpc3RpbmdOb3RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChleGlzdGluZ05vdGUuc3RhdHVzID09PSBcIkFjdGl2ZVwiKSB7XG4gICAgICAgIHdhcm5BbGVydEVsZW0uY2xhc3NMaXN0LmFkZChcIndhcm5pbmdfdmlzaWJsZVwiKTtcbiAgICAgICAgdGhpcy5idXR0b25BZGQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gICBwcml2YXRlIGNyZWF0ZU5ld05vdGUoZGF0YUFycmF5OiBBcnJheTxEYXRhT2JqPikge1xuICAgIGNvbnN0IG5vdGVPYmogPSB7XG4gICAgICBub3RlOiB0aGlzLm5vdGVUZXh0LFxuICAgICAgc3RhdHVzOiBcIkFjdGl2ZVwiLFxuICAgICAgZGF0ZTogbmV3IERhdGUoKVxuICAgIH1cbiAgICBkYXRhQXJyYXkucHVzaChub3RlT2JqKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm5vdGVzXCIsIEpTT04uc3RyaW5naWZ5KGRhdGFBcnJheSkpO1xuICAgIHJldHVybiBub3RlT2JqXG4gICB9XG5cbiAgIG9uRm9ybVN1Ym1pdChoYW5kbGVyOiBTdWJtaXRIYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlclxuICAgfVxufSIsImltcG9ydCBcIi4vc3R5bGVzLnNjc3NcIjtcbmltcG9ydCB7IE5vdGUgfSBmcm9tIFwiLi4vbm90ZVwiO1xuaW1wb3J0IHsgRGF0YU9iaiB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG5leHBvcnQgY2xhc3MgTGlzdCB7XG4gIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gIG5vdGVzQXJyOiBBcnJheTxEYXRhT2JqPjtcbiAgaXNSZXZlcnNlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibGlzdFwiKTtcblxuICAgIHRoaXMucmVuZGVyTm90ZXMoXCJBbGxcIiwgZmFsc2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGcm9tTG9jYWxTdG9yYWdlKCkge1xuICAgIHRoaXMubm90ZXNBcnIgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibm90ZXNcIikpLm1hcCgob2JqOiBEYXRhT2JqKSA9PiAoey4uLm9iaiwgZGF0ZTogbmV3IERhdGUob2JqLmRhdGUpfSkpO1xuICB9XG5cbiAgcmVuZGVyTm90ZXMoc3RhdHVzRmlsdGVyOiBzdHJpbmcsIGlzUmV2ZXJzZWQ6IGJvb2xlYW4pIHtcbiAgICB3aGlsZSAodGhpcy5jb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5jb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHRoaXMuZ2V0RnJvbUxvY2FsU3RvcmFnZSgpO1xuXG4gICAgaWYgKHN0YXR1c0ZpbHRlciA9PT0gXCJBY3RpdmVcIikge1xuICAgICAgdGhpcy5ub3Rlc0FyciA9IHRoaXMubm90ZXNBcnIuZmlsdGVyKCBlID0+IGUuc3RhdHVzID09PSBcIkFjdGl2ZVwiKTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1c0ZpbHRlciA9PT0gXCJEb25lXCIpIHtcbiAgICAgIHRoaXMubm90ZXNBcnIgPSB0aGlzLm5vdGVzQXJyLmZpbHRlciggZSA9PiBlLnN0YXR1cyA9PT0gXCJEb25lXCIpO1xuICAgIH07XG5cbiAgICBpZiAoaXNSZXZlcnNlZCkge1xuICAgICAgdGhpcy5ub3Rlc0Fyci5zb3J0KChub3RlMSwgbm90ZTIpID0+IG5vdGUxLmRhdGUgPiBub3RlMi5kYXRlID8gMSA6IC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub3Rlc0Fyci5zb3J0KChub3RlMSwgbm90ZTIpID0+IG5vdGUxLmRhdGUgPCBub3RlMi5kYXRlID8gMSA6IC0xKTtcbiAgICB9XG5cbiAgICB0aGlzLm5vdGVzQXJyLmZvckVhY2goZSA9PiB7XG4gICAgICBjb25zdCBub3RlOiBOb3RlID0gbmV3IE5vdGUoZS5ub3RlLCBlLmRhdGUsIGUuc3RhdHVzKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKG5vdGUuY29udGFpbmVyKTtcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIGFkZE5vdGUobm90ZTogTm90ZSkge1xuICAgIHRoaXMuaXNSZXZlcnNlZCA9PT0gdHJ1ZSA/IHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKG5vdGUuY29udGFpbmVyKSA6IHRoaXMuY29udGFpbmVyLnByZXBlbmQobm90ZS5jb250YWluZXIpO1xuICB9XG5cbn0iLCJpbXBvcnQgXCIuL3N0eWxlcy5zY3NzXCI7XG5pbXBvcnQgeyBGaWx0ZXJDaGFuZ2VIYW5kbGVyLCBGaWx0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIE5hdiB7XG4gIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XG4gIGJ1dHRvbnNDb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuICBidXR0b25BbGw6IEhUTUxCdXR0b25FbGVtZW50O1xuICBidXR0b25Ub0RvOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgYnV0dG9uRG9uZTogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIGJ1dHRvblJldmVyc2U6IEhUTUxCdXR0b25FbGVtZW50O1xuICBmaWx0ZXI6IEZpbHRlciA9IFwiQWxsXCI7XG4gIGlzUmV2ZXJzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaGFuZGxlcjogRmlsdGVyQ2hhbmdlSGFuZGxlciB8IG51bGwgPSBudWxsO1xuICBzZWxlY3RlZEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbmF2Jyk7XG4gICAgdGhpcy5idXR0b25zQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5idXR0b25zQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25hdl9fY29udGFpbmVyJyk7XG4gICAgdGhpcy5idXR0b25SZXZlcnNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgdGhpcy5idXR0b25SZXZlcnNlLmNsYXNzTGlzdC5hZGQoJ25hdl9fYnV0dG9uJyk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMuYnV0dG9uc0NvbnRhaW5lciwgdGhpcy5idXR0b25SZXZlcnNlKTtcblxuICAgIGNvbnN0IGJ1dHRvbkltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJ1dHRvbkltZy5jbGFzc0xpc3QuYWRkKCduYXZfX3JldmVyc2UnKTtcbiAgICB0aGlzLmJ1dHRvblJldmVyc2UuYXBwZW5kQ2hpbGQoYnV0dG9uSW1nKTtcbiAgICB0aGlzLmJ1dHRvblJldmVyc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuaXNSZXZlcnNlZCA9PT0gZmFsc2UgPyB0aGlzLmlzUmV2ZXJzZWQgPSB0cnVlIDogdGhpcy5pc1JldmVyc2VkID0gZmFsc2U7XG4gICAgICB0aGlzLmhhbmRsZXIodGhpcy5maWx0ZXIsIHRoaXMuaXNSZXZlcnNlZCk7XG4gICAgfSlcbiAgICBcblxuICAgIHRoaXMuYnV0dG9uQWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgdGhpcy5idXR0b25BbGwuY2xhc3NMaXN0LmFkZCgnbmF2X19idXR0b24nLCAnbmF2X19idXR0b25fc2VsZWN0ZWQnKTtcbiAgICB0aGlzLnNlbGVjdGVkQnV0dG9uID0gdGhpcy5idXR0b25BbGw7XG4gICAgdGhpcy5idXR0b25BbGwudGV4dENvbnRlbnQgPSBcIkFsbFwiO1xuICAgIHRoaXMuc2V0RmlsdGVyT25DbGljayh0aGlzLmJ1dHRvbkFsbCwgXCJBbGxcIik7XG5cbiAgICB0aGlzLmJ1dHRvblRvRG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICB0aGlzLmJ1dHRvblRvRG8uY2xhc3NMaXN0LmFkZCgnbmF2X19idXR0b24nKTtcbiAgICB0aGlzLmJ1dHRvblRvRG8udGV4dENvbnRlbnQgPSBcIkFjdGl2ZVwiO1xuICAgIHRoaXMuc2V0RmlsdGVyT25DbGljayh0aGlzLmJ1dHRvblRvRG8sIFwiQWN0aXZlXCIpO1xuXG4gICAgdGhpcy5idXR0b25Eb25lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgdGhpcy5idXR0b25Eb25lLmNsYXNzTGlzdC5hZGQoJ25hdl9fYnV0dG9uJyk7XG4gICAgdGhpcy5idXR0b25Eb25lLnRleHRDb250ZW50ID0gXCJEb25lXCI7XG4gICAgdGhpcy5zZXRGaWx0ZXJPbkNsaWNrKHRoaXMuYnV0dG9uRG9uZSwgXCJEb25lXCIpO1xuXG4gICAgdGhpcy5idXR0b25zQ29udGFpbmVyLmFwcGVuZCh0aGlzLmJ1dHRvbkFsbCwgdGhpcy5idXR0b25Ub0RvLCB0aGlzLmJ1dHRvbkRvbmUpO1xuICB9XG5cbiAgb25GaWx0ZXJDaGFuZ2UoaGFuZGxlcjogRmlsdGVyQ2hhbmdlSGFuZGxlcikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cblxuICBzZXRGaWx0ZXJPbkNsaWNrKGJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQsIG5hbWU6IEZpbHRlcikge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RlZEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwibmF2X19idXR0b25fc2VsZWN0ZWRcIilcbiAgICAgIHRoaXMuZmlsdGVyID0gbmFtZTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRCdXR0b24gPSBidXR0b247XG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcIm5hdl9fYnV0dG9uX3NlbGVjdGVkXCIpO1xuICAgICAgdGhpcy5oYW5kbGVyKHRoaXMuZmlsdGVyLCB0aGlzLmlzUmV2ZXJzZWQpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgXCIuL3N0eWxlcy5zY3NzXCI7XG5pbXBvcnQgeyBEYXRhT2JqLCBGaWx0ZXIgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIE5vdGUge1xuICBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuICBidXR0b25EZWxldGU6IEhUTUxCdXR0b25FbGVtZW50O1xuICBidXR0b25Eb25lOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgbm90ZVRleHQ6IHN0cmluZztcbiAgc3RhdHVzRWxlbTogSFRNTFBhcmFncmFwaEVsZW1lbnQ7XG4gIGZpbHRlcjogRmlsdGVyID0gXCJBbGxcIjtcblxuICBjb25zdHJ1Y3Rvcih0ZXh0OiBzdHJpbmcsIGRhdGU6IERhdGUsIHN0YXR1czogc3RyaW5nKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJub3RlXCIpO1xuICAgIGNvbnN0IGxlZnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxlZnRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vdGVfX2NvbnRhaW5lcl9pbm5lclwiKTtcbiAgICBjb25zdCByaWdodENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcmlnaHRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vdGVfX2NvbnRhaW5lcl9pbm5lclwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQobGVmdENvbnRhaW5lciwgcmlnaHRDb250YWluZXIpO1xuXG4gICAgY29uc3Qgbm90ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICBub3RlLmNsYXNzTGlzdC5hZGQoXCJub3RlX190ZXh0XCIpO1xuICAgIG5vdGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIHRoaXMubm90ZVRleHQgPSB0ZXh0O1xuICAgIGNvbnN0IGJ1dHRvbnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGJ1dHRvbnNDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vdGVfX2NvbnRhaW5lcl9idXR0b25zXCIpO1xuICAgIGxlZnRDb250YWluZXIuYXBwZW5kKG5vdGUsIGJ1dHRvbnNDb250YWluZXIpO1xuXG4gICAgdGhpcy5idXR0b25EZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHRoaXMuYnV0dG9uRGVsZXRlLmNsYXNzTGlzdC5hZGQoXCJub3RlX19idXR0b25cIik7XG4gICAgdGhpcy5idXR0b25EZWxldGUudGV4dENvbnRlbnQgPSBcIkRlbGV0ZVwiO1xuICAgIHRoaXMuYnV0dG9uRGVsZXRlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLmRlbGV0ZU5vdGUoKSk7XG5cbiAgICB0aGlzLmJ1dHRvbkRvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHRoaXMuYnV0dG9uRG9uZS5jbGFzc0xpc3QuYWRkKFwibm90ZV9fYnV0dG9uXCIpO1xuICAgIHRoaXMuYnV0dG9uRG9uZS50ZXh0Q29udGVudCA9IFwiRG9uZVwiO1xuICAgIHRoaXMuYnV0dG9uRG9uZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5tYXJrTm90ZUFzRG9uZSgpKTtcblxuICAgIGJ1dHRvbnNDb250YWluZXIuYXBwZW5kKHRoaXMuYnV0dG9uRG9uZSwgdGhpcy5idXR0b25EZWxldGUpO1xuXG4gICAgdGhpcy5zdGF0dXNFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgdGhpcy5zdGF0dXNFbGVtLmNsYXNzTGlzdC5hZGQoXCJub3RlX19zdGF0dXNcIik7XG4gICAgdGhpcy5zdGF0dXNFbGVtLnRleHRDb250ZW50ID0gc3RhdHVzO1xuICAgIGlmIChzdGF0dXMgPT09IFwiQWN0aXZlXCIpIHtcbiAgICAgIHRoaXMuc3RhdHVzRWxlbS5jbGFzc0xpc3QuYWRkKFwibm90ZV9fc3RhdHVzX2FjdGl2ZVwiKVxuICAgIH0gIGVsc2Uge1xuICAgICAgdGhpcy5zdGF0dXNFbGVtLmNsYXNzTGlzdC5hZGQoXCJub3RlX19zdGF0dXNfZG9uZVwiKTtcbiAgICAgIHRoaXMuYnV0dG9uRG9uZS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgICB0aGlzLmJ1dHRvbkRlbGV0ZS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGRhdGVFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgZGF0ZUVsZW0uY2xhc3NMaXN0LmFkZChcIm5vdGVfX2RhdGVcIik7XG4gICAgZGF0ZUVsZW0udGV4dENvbnRlbnQgPSBnZXRQcmV0dHlEYXRlKGRhdGUpO1xuXG4gICAgcmlnaHRDb250YWluZXIuYXBwZW5kKHRoaXMuc3RhdHVzRWxlbSwgZGF0ZUVsZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWxldGVOb3RlKCkge1xuICAgIGNvbnN0IG5vdGVzQXJyOiBBcnJheTxEYXRhT2JqPiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJub3Rlc1wiKSk7XG4gICAgY29uc3Qgbm90ZUluZGV4ID0gbm90ZXNBcnIuZmluZEluZGV4KGUgPT4gZS5ub3RlID09PSB0aGlzLm5vdGVUZXh0KTtcbiAgICBub3Rlc0Fyci5zcGxpY2Uobm90ZUluZGV4LCAxKTtcbiAgICBjb25zdCBKc29uQXJyID0gSlNPTi5zdHJpbmdpZnkobm90ZXNBcnIpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibm90ZXNcIiwgSnNvbkFycik7XG4gICAgdGhpcy5jb250YWluZXIucmVtb3ZlKCk7XG4gIH1cblxuICBwcml2YXRlIG1hcmtOb3RlQXNEb25lKCkge1xuICAgIGNvbnN0IG5vdGVzQXJyOiBBcnJheTxEYXRhT2JqPiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJub3Rlc1wiKSk7XG4gICAgbm90ZXNBcnIuZmluZChlID0+IGUubm90ZSA9PT0gdGhpcy5ub3RlVGV4dCkuc3RhdHVzID0gXCJEb25lXCI7XG4gICAgdGhpcy5zdGF0dXNFbGVtLmNsYXNzTGlzdC5yZW1vdmUoXCJub3RlX19zdGF0dXNfYWN0aXZlXCIpO1xuICAgIHRoaXMuc3RhdHVzRWxlbS5jbGFzc0xpc3QuYWRkKFwibm90ZV9fc3RhdHVzX2RvbmVcIik7XG4gICAgdGhpcy5idXR0b25Eb25lLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcbiAgICB0aGlzLmJ1dHRvbkRlbGV0ZS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcInRydWVcIik7XG4gICAgdGhpcy5zdGF0dXNFbGVtLnRleHRDb250ZW50ID0gXCJEb25lXCI7XG4gICAgY29uc3QgSnNvbkFyciA9IEpTT04uc3RyaW5naWZ5KG5vdGVzQXJyKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm5vdGVzXCIsIEpzb25BcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFByZXR0eURhdGUgKGRhdGU6IERhdGUpIHtcbiAgY29uc3QgZGF5c0FyciA9IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlblwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXTtcbiAgY29uc3QgbW9udGhzQXJyID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xuICBjb25zdCBkYXk6IHN0cmluZyA9IGRheXNBcnJbZGF0ZS5nZXREYXkoKV07XG4gIGNvbnN0IGRhdGVOdW06IG51bWJlciA9IGRhdGUuZ2V0RGF0ZSgpO1xuICBjb25zdCBtb250aDogc3RyaW5nID0gbW9udGhzQXJyW2RhdGUuZ2V0TW9udGgoKV07XG4gIGNvbnN0IHllYXI6IG51bWJlciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gIGxldCBtaW5zID0gZGF0ZS5nZXRNaW51dGVzKCkudG9TdHJpbmcoKTtcbiAgaWYgKG1pbnMubGVuZ3RoPDIpIG1pbnMgPSBcIjBcIiArIG1pbnM7XG4gIHJldHVybiBgJHtkYXl9ICAgJHtkYXRlTnVtfSAke21vbnRofSAke3llYXJ9ICAgJHtob3Vyc306JHttaW5zfWA7XG5cbn0iLCJpbXBvcnQgXCIuL3N0eWxlcy5zY3NzXCI7XG5cbmV4cG9ydCBjbGFzcyBXYXJuaW5nIHtcbiAgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcbiAgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihhZGRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50KSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ3YXJuaW5nXCIpO1xuXG4gICAgdGhpcy5idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJ3YXJuaW5nX19idXR0b25cIik7XG4gICAgdGhpcy5idXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ3YXJuaW5nX3Zpc2libGVcIik7XG4gICAgICBhZGRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgfSk7XG5cbiAgICBjb25zdCB3YXJuaW5nVGV4dDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICB3YXJuaW5nVGV4dDEuY2xhc3NMaXN0LmFkZChcIndhcm5pbmdfX3RleHRcIik7XG4gICAgd2FybmluZ1RleHQxLnRleHRDb250ZW50ID0gXCJTb3JyeSwgeW91IGFscmVhZHkgaGF2ZSB0aGlzIHRhc2shXCI7XG4gICAgY29uc3Qgd2FybmluZ1RleHQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgd2FybmluZ1RleHQyLmNsYXNzTGlzdC5hZGQoXCJ3YXJuaW5nX190ZXh0XCIpO1xuICAgIHdhcm5pbmdUZXh0Mi50ZXh0Q29udGVudCA9IFwiWW91IGNhbid0IGNyZWF0ZSBpdCBhZ2lhbiB1bnRpbCBpdCBpc24ndCBkb25lL2RlbGV0ZWQgOihcIjtcblxuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZCh0aGlzLmJ1dHRvbiwgd2FybmluZ1RleHQxLCB3YXJuaW5nVGV4dDIpO1xuICB9XG5cbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSAnLi9hcHAnO1xuaW1wb3J0ICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCAnLi9ub3JtYWxpemUuc2Nzcyc7XG5cbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbmJvZHkuYXBwZW5kQ2hpbGQoYXBwLmFwcFJvb3QpOyJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInRoaXMiLCJhcHBSb290IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwVGl0bGUiLCJjb250YWluZXIiLCJhcHBlbmQiLCJ0ZXh0Q29udGVudCIsImRhdGUxIiwiRGF0ZSIsInNldE1vbnRoIiwic2V0SG91cnMiLCJkYXRlMiIsIm5vdGVzQXJyIiwibm90ZSIsInN0YXR1cyIsImRhdGUiLCJ1bmRlZmluZWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwibm90ZXNKc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldEl0ZW0iLCJuYXZpZ2F0aW9uIiwiTmF2IiwibGlzdCIsIkxpc3QiLCJmb3JtIiwiRm9ybSIsImJpbmRlZE1ldGhvZCIsImhhbmRsZU5vdGVTdWJtaXQiLCJiaW5kIiwib25Gb3JtU3VibWl0Iiwib25GaWx0ZXJDaGFuZ2UiLCJoYW5kbGVGaWx0ZXJDaGFuZ2UiLCJub3RlRGF0YSIsIm5ld05vdGUiLCJOb3RlIiwiYWRkTm90ZSIsInN0YXR1c0ZpbHRlciIsImlzUmV2ZXJzZWQiLCJyZW5kZXJOb3RlcyIsImhhbmRsZXIiLCJpbnB1dCIsInNldEF0dHJpYnV0ZSIsImJ1dHRvbkFkZCIsImNvdW50ZXIiLCJjb3VudGVyVmFsdWUiLCJsZW5ndGhXYXJuaW5nIiwid2FybmluZ0FsZXJ0IiwiV2FybmluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb3VudEFuZFVwZ3JhZGVJbnB1dCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRhdGFBcnJheSIsInBhcnNlIiwiY2hlY2tOb3RlRHVwbGVzIiwiY3JlYXRlTmV3Tm90ZSIsInZhbHVlIiwibm90ZVRleHQiLCJpbnB1dEVsZW0iLCJ3YXJuRWxlbTEiLCJ3YXJtRWxlbTIiLCJsZW5ndGgiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwicmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwid2FybkFsZXJ0RWxlbSIsImV4aXN0aW5nTm90ZSIsImZpbmQiLCJub3RlT2JqIiwicHVzaCIsImdldEZyb21Mb2NhbFN0b3JhZ2UiLCJtYXAiLCJvYmoiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJmaWx0ZXIiLCJzb3J0Iiwibm90ZTEiLCJub3RlMiIsImZvckVhY2giLCJhcHBlbmRDaGlsZCIsInByZXBlbmQiLCJidXR0b25zQ29udGFpbmVyIiwiYnV0dG9uUmV2ZXJzZSIsImJ1dHRvbkltZyIsImJ1dHRvbkFsbCIsInNlbGVjdGVkQnV0dG9uIiwic2V0RmlsdGVyT25DbGljayIsImJ1dHRvblRvRG8iLCJidXR0b25Eb25lIiwiYnV0dG9uIiwibmFtZSIsInRleHQiLCJsZWZ0Q29udGFpbmVyIiwicmlnaHRDb250YWluZXIiLCJidXR0b25EZWxldGUiLCJkZWxldGVOb3RlIiwibWFya05vdGVBc0RvbmUiLCJzdGF0dXNFbGVtIiwiZGF0ZUVsZW0iLCJkYXkiLCJnZXREYXkiLCJkYXRlTnVtIiwiZ2V0RGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJob3VycyIsImdldEhvdXJzIiwibWlucyIsImdldE1pbnV0ZXMiLCJ0b1N0cmluZyIsImdldFByZXR0eURhdGUiLCJub3RlSW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJKc29uQXJyIiwiYWRkQnV0dG9uIiwid2FybmluZ1RleHQxIiwid2FybmluZ1RleHQyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImJvZHkiLCJxdWVyeVNlbGVjdG9yIiwiYXBwIiwiQXBwIl0sInNvdXJjZVJvb3QiOiIifQ==